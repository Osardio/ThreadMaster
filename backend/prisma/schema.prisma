generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CanvasColor {
  @@map("canvas_colors")
  uuid       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?    @unique @db.VarChar
  created_at DateTime?  @db.Timestamptz(6)
  updated_at DateTime?  @db.Timestamptz(6) @updatedAt
  canvas     Canvas[]
}

model CanvasName {
  @@map("canvas_names")
  uuid       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?    @unique @db.VarChar
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @default(now()) @db.Timestamptz(6) @updatedAt
  canvas     Canvas[]
}

model CanvasSize {
  @@map("canvas_sizes")
  uuid       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  size       Int?       @unique
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @default(now()) @db.Timestamptz(6) @updatedAt
  canvas     Canvas[]
}

model Canvas {
  @@map("canvases")
  uuid              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  canvas_name_uuid  String?        @db.Uuid
  canvas_color_uuid String?        @db.Uuid
  canvas_size_uuid  String?        @db.Uuid
  kit_uuid          String         @unique @db.Uuid
  created_at        DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?      @default(now()) @db.Timestamptz(6) @updatedAt
  canvas_name       CanvasName?    @relation(fields: [canvas_name_uuid], references: [uuid], onDelete: SetNull)
  canvas_color      CanvasColor?   @relation(fields: [canvas_color_uuid], references: [uuid], onDelete: SetNull)
  canvas_size       CanvasSize?    @relation(fields: [canvas_size_uuid], references: [uuid], onDelete: SetNull)
  kit               Kit            @relation(fields: [kit_uuid], references: [uuid], onDelete: Cascade)
}

model File {
  @@map("files")
  uuid       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kit_uuid   String    @db.Uuid
  name       String?   @db.VarChar
  data       String?   @db.VarChar
  file_type  file_type @default(OTHER)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6) @updatedAt
  kit        Kit       @relation(fields: [kit_uuid], references: [uuid], onDelete: Cascade)
}

model Manufacturer {
  @@map("manufacturers")
  uuid       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @unique @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6) @updatedAt
  kits       Kit[]
  series     Series[]
}

model Series {
  @@map("series")
  uuid              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_uuid String?        @db.Uuid
  name              String?        @db.VarChar
  created_at        DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?      @default(now()) @db.Timestamptz(6) @updatedAt
  manufacturer      Manufacturer?  @relation(fields: [manufacturer_uuid], references: [uuid], onDelete: SetNull)
  kits              Kit[]

  @@unique([name, manufacturer_uuid])
}

model Kit {
  @@map("kits")
  uuid              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_uuid String?         @db.Uuid
  series_uuid       String?         @db.Uuid
  code              String?         @db.VarChar
  name_en           String?         @db.VarChar
  name_ru           String?         @db.VarChar
  design_width      Int?
  design_length     Int?
  stitches_count    Int?
  charms            String?         @db.VarChar
  comment           String?         @db.VarChar
  colors_count      Int?
  beads_available   Boolean?
  created_at        DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?       @default(now()) @db.Timestamptz(6) @updatedAt
  canvas            Canvas?
  files             File[]
  kits_palettes     KitPalette[]
  kits_threads      KitThread[]
  manufacturer      Manufacturer?   @relation(fields: [manufacturer_uuid], references: [uuid], onDelete: SetNull)
  series            Series?         @relation(fields: [series_uuid], references: [uuid], onDelete: SetNull)

  @@unique([manufacturer_uuid, series_uuid, code])
}

model KitPalette {
  @@map("kits_palettes")
  uuid                  String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kit_uuid              String                  @db.Uuid
  palette_uuid          String                  @db.Uuid
  order_number          Int
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @db.Timestamptz(6) @updatedAt
  kit                   Kit                     @relation(fields: [kit_uuid], references: [uuid], onDelete: Cascade)
  palette               Palette                 @relation(fields: [palette_uuid], references: [uuid], onDelete: Cascade)
  kits_threads_variants KitThreadVariant[]

  @@unique([kit_uuid, palette_uuid])
}

model KitThread {
  @@map("kits_threads")
  uuid                  String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kit_uuid              String                  @db.Uuid
  order_number          Int
  quantity              Int?
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @db.Timestamptz(6) @updatedAt
  kit                   Kit                     @relation(fields: [kit_uuid], references: [uuid], onDelete: Cascade)
  kits_threads_variants KitThreadVariant[]

  @@unique([kit_uuid, order_number])
}

model KitThreadVariant {
  @@map("kits_threads_variants")
  uuid              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kits_threads_uuid String        @db.Uuid
  thread_uuid       String        @db.Uuid
  kit_palette_uuid  String        @db.Uuid
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?     @default(now()) @db.Timestamptz(6) @updatedAt
  kit_thread        KitThread     @relation(fields: [kits_threads_uuid], references: [uuid], onDelete: Cascade)
  thread            Thread        @relation(fields: [thread_uuid], references: [uuid], onDelete: Cascade)
  kit_palette       KitPalette    @relation(fields: [kit_palette_uuid], references: [uuid], onDelete: Cascade)

  @@unique([kits_threads_uuid, kit_palette_uuid])
}

model Thread {
  @@map("threads")
  uuid                  String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  palette_uuid          String                  @db.Uuid
  name                  String?                 @db.VarChar
  code                  String                  @db.VarChar
  color                 String?                 @db.VarChar
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @db.Timestamptz(6) @updatedAt
  palette               Palette                 @relation(fields: [palette_uuid], references: [uuid], onDelete: Cascade)
  kits_threads_variants KitThreadVariant[]

  @@unique([palette_uuid, code])
}

model Palette {
  @@map("palettes")
  uuid          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @unique @db.VarChar
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6) @updatedAt
  threads       Thread[]
  kits_palettes KitPalette[]
}

enum file_type {
  FRONT
  THUMBNAIL
  OTHER
}
